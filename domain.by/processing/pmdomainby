#!/usr/bin/php
<?php

set_include_path(get_include_path() . PATH_SEPARATOR . "/usr/local/mgr5/include/php");
define('DEBUG', true);
define('__MODULE__', "pmdomainby");

define('SERVICE_PROFILE_XML', __DIR__ . '/service_profile.xml' );
define('REGISTRAR_API_URL', 'https://dms1.ok.by/api/v1/json-rpc');
define('PROFILE_FORM_VALUES_PATTERN', '/(?<=(?:<\/slist>)|(?:<\/messages>))(?:<(\w*)\s?[\w\s\d"=]*?>.*?<\/\1>)+(?=<\/doc>)/');

define('BUSINESS_PROFILETYPE', 2);
define('BY', 21);
define('EGR_LEN', 9);
define('UNP_LEN', 9);
define('PASSPORT_NMBR_LEN', 7);
define('PASSPORT_PERSONALNMBR_LEN', 14);

require_once  __DIR__ . '/include/bill_util.php';

ini_set('error_log', "/usr/local/mgr5/var/". __MODULE__ .".log");

/**
 * [$longopts description]
 * @var array
 */
$longopts  = array
(
    "command:",
    "subcommand:",
    "id:",
    "item:",
    "lang:",
    "module:",
    "itemtype:",
    "intname:",
    "param:",
    "value:",
    "runningoperation:",
    "level:",
    "addon:",

    "tld:",
    "searchstring:",
        "211" => "SZ",	"164" => "MP",	"197" => "SC",	"184" => "BL",
        "188" => "MF",	"189" => "PM",	"195" => "SN",	"190" => "VC",
        "186" => "KN",	"187" => "LC",	"196" => "RS",	"199" => "SG",
        "214" => "SY",	"200" => "SK",	"201" => "SI",	"233" => "US",
        "234" => "UM",	"202" => "SB",	"203" => "SO",	"208" => "SD",
        "209" => "SR",	"198" => "SL",	"216" => "TJ",	"218" => "TH",
        "215" => "TW",	"217" => "TZ",	"227" => "TC",	"220" => "TG",
        "221" => "TK",	"222" => "TO",	"223" => "TT",	"228" => "TV",
        "224" => "TN",	"226" => "TM",	"225" => "TR",	"229" => "UG",
        "236" => "UZ",	"230" => "UA",	"235" => "UY",	"71" => "FO",
        "72" => "FJ",	"174" => "PH",	"73" => "FI",	"70" => "FK",
        "74" => "FR",	"75" => "GF",	"76" => "PF",	"77" => "TF",
        "55" => "HR",	"42" => "CF",	"43" => "TD",	"147" => "ME",
        "58" => "CZ",	"44" => "CL",	"213" => "CH",	"212" => "SE",
        "210" => "SJ",	"207" => "LK",	"63" => "EC",	"66" => "GQ",
        "67" => "ER",	"68" => "EE",	"69" => "ET",	"205" => "GS",
        "117" => "KR",	"204" => "ZA",	"109" => "JM",	"110" => "JP",
				);
	
	$registrant_info = array();
	
	$registrant_info['r_phone'] = $rawInfo['phone'];
	$registrant_info['r_email'] = $rawInfo['email'];
	$registrant_info['address_country'] = $country_codes_map[$rawInfo['location_country']];
	$registrant_info['address_city'] = $rawInfo['location_city'];
	$registrant_info['address_region'] = $rawInfo['location_state'];
	$registrant_info['address_index'] = $rawInfo['location_postcode'];
	$registrant_info['address_street'] = $rawInfo['location_street'];
	$registrant_info['address_building'] = $rawInfo['location_building'];
	$registrant_info['address_office'] = $rawInfo['location_office'];
	
	switch($rawInfo['profiletype']){
		case '1':
			$registrant_info['r_type'] = 'person';
			$registrant_info['r_name'] = "{$rawInfo['lastname_locale']} {$rawInfo['firstname_locale']} {$rawInfo['middlename_locale']}";
			$registrant_info['passport_nmbr'] = $rawInfo['passport'];
			$registrant_info['passport_org'] = $rawInfo['passport_org'];
			$registrant_info['passport_date'] = $rawInfo['passport_date'];
			$registrant_info['passport_personalnmbr'] = $rawInfo['passport_personalnmbr'];
		break;
		case '2':
			$registrant_info['r_type'] = 'organization';
			$registrant_info['r_name'] = $rawInfo['company_locale'];
			$registrant_info['r_chief'] = "{$rawInfo['lastname_locale']} {$rawInfo['firstname_locale']} {$rawInfo['middlename_locale']}";
			
			if($registrant_info['address_country'] === 'BY'){
				
				$registrant_info['egr_num'] = $rawInfo['egr_num'];
				$registrant_info['egr_org'] = $rawInfo['egr_org'];
				$registrant_info['egr_date'] = $rawInfo['egr_date'];
			}
		break;
		case '3':
			$registrant_info['r_type'] = 'ip';
			$registrant_info['r_name'] = "{$rawInfo['lastname_locale']} {$rawInfo['firstname_locale']} {$rawInfo['middlename_locale']}";
			$registrant_info['passport_nmbr'] = $rawInfo['passport'];
			$registrant_info['passport_org'] = $rawInfo['passport_org'];
			$registrant_info['passport_date'] = $rawInfo['passport_date'];
			$registrant_info['passport_personalnmbr'] = $rawInfo['passport_personalnmbr'];
			$registrant_info['r_unp'] = $rawInfo['ip_unp'];
			$registrant_info['egr_org'] = $rawInfo['ip_egr_org'];
			$registrant_info['egr_num'] = $rawInfo['ip_egr_num'];
			$registrant_info['egr_date'] = $rawInfo['ip_egr_date'];
		break;
	}

	return $registrant_info;
}

try {
	$command = $options['command'];
	$runningoperation = array_key_exists("runningoperation", $options) ? (int)$options['runningoperation'] : 0;
	$item = array_key_exists("item", $options) ? (int)$options['item'] : 0;
	Debug("command ". $options['command'] . ", item: " . $item . ", operation: " . $runningoperation);
	if ($command == "features") {
		/**
		 * Build and output XML with module features and configuration
		 */
		$config_xml = simplexml_load_string($default_xml_string);
		/**
		 * Set supported itemtype 'domain'
		 */
		$itemtypes_node = $config_xml->addChild("itemtypes");
		$itemtypes_node->addChild("itemtype")->addAttribute("name", "domain");
		/**
		 * Set settings param
		 */
		$params_node = $config_xml->addChild("params");


		$params_node->addChild("param")->addAttribute("name", "username");							
		$password = $params_node->addChild("param");											// Password for DB connection
		$password->addAttribute("name", "password");
		$password->addAttribute("crypted", "yes");
		/**
		 * Set supported features. Any feature can be skipped
		 */
		$features_node = $config_xml->addChild("features");
		$features_node->addChild("feature")->addAttribute("name", "check_connection");			// Checking connection to DB with provided credentials


		$features_node->addChild("feature")->addAttribute("name", "open");						// Register new domains in DB




		$features_node->addChild("feature")->addAttribute("name", "setparam");					// Change param of service. Usually not used for domains
		$features_node->addChild("feature")->addAttribute("name", "prolong");					// Prolong service. Simple chnage expiredate of domain in DB


		$features_node->addChild("feature")->addAttribute("name", "get_contact_type");			// Get contact type needed for TLD and other specific TLD parameters
		$features_node->addChild("feature")->addAttribute("name", "tune_service_profile");		// Tune service profile (domain contact) form while order service
		$features_node->addChild("feature")->addAttribute("name", "validate_service_profile");  // Validate provided by customer basic or additional service profile parameters
		$features_node->addChild("feature")->addAttribute("name", "update_ns");					// Change list of domain nameserver
		$features_node->addChild("feature")->addAttribute("name", "whois");						// Return WHOIS domain data. 

		echo $config_xml->asXML();

	} elseif ($command == "check_connection") {
		$stdin_input = file_get_contents('php://stdin');
		$connection_param = simplexml_load_string($stdin_input);
		$username = $connection_param->processingmodule->username;
		$password = $connection_param->processingmodule->password;
		$registar_client = new RegistrarClient(REGISTRAR_API_URL, $username, $password, DEBUG);

		try {
			Debug($stdin_input);
			$registar_client->CheckDomain( 'test.by' );
		} catch (Exception $e) {
			throw new BillmgrError("invalid_login_or_passwd");
		}
		echo $default_xml_string;
	} elseif ($command == "get_contact_type") {
		/**
		 * Return XML config for TLD
		 */
		$config_xml = simplexml_load_string($default_xml_string);
		$tld = $options['tld'];
		if ($tld == "by") { // TLD with all available options

			$config_xml->addAttribute("ns", "require");				// Require NS while order or transfer domain of 'my' tld
			$config_xml->addAttribute("cancel_prolong_before", "30");	// Execute cancel_prolong command for domain before 30 day of expire
		}
		$config_xml->addChild("contact_type", "customer"); 	// Contact for customer account. Usually used for registrar with creating acconut for your customer




		echo $config_xml->asXML();
	} elseif ($command == "whois") {
		
		$domain = $options['param'];
		
		$whois_xml = simplexml_load_string($default_xml_string);
		$registrar_client = GetRegistrarClient($options['module']);
		$available = $registrar_client->CheckDomain($domain);
		
		if ( $available) {
			$whois_xml->addChild("whois", "Object does not exist");
		} else {
            $r_info = $registrar_client->WhoIs($domain);
            
			$whois[0] = "Домен: $domain" . PHP_EOL;
			$whois[1] = 'Статус: активен' . PHP_EOL;
            
            $r_type = $r_info['r_type'];
            if ( 'person' == $r_type || 'ip' == $r_type ) {
                $whois[2] = "Тип владельца: " . ( 'person' == $r_type ? ' Физ. лицо' : 'ИП') . PHP_EOL;
                $whois[16] = "Номер паспорта: {$r_info['passport_nmbr']}" . PHP_EOL;
                $whois[17] = "Кем выдан паспорт: {$r_info['passport_org']}" . PHP_EOL;
                $whois[18] = "Дата выдачи паспорта: {$r_info['passport_date']}" . PHP_EOL;
                $whois[19] = "Персональный идентификационный номер: {$r_info['passport_personalnmbr']}" . PHP_EOL;
            }
            if ( 'organization' ==  $r_type || 'ip' == $r_type ) {
                $whois[2] = "Тип владельца: " . ( 'organization' == $r_type ? ' Юр. лицо' : 'ИП') . PHP_EOL;
                if ( 'organization' ==  $r_type ) {
                    $whois[4] = "ФИО руководителя: {$r_info['r_chief']}" > PHP_EOL;
                }
                $whois[7] = "УНП: {$r_info['r_unp']}" . PHP_EOL;
                if ( 'BY' == $r_info['address_country'] ) {
                    $whois[20] = "Регистрационный номер ЕГР или УНП : {$r_info['egr_num']}" . PHP_EOL;
                    $whois[21] = "Кем выполнена госрегистрация: {$r_info['egr_org']}" . PHP_EOL;
                    $whois[22] = "Номер решения о госрегистрации: {$r_info['egr_resh']}" . PHP_EOL;
                    $whois[23] = "Дата решения о госрегистрации: {$r_info['egr_date']}" . PHP_EOL;
                }
            }
            
            $whois[3] = "Имя владельца: {$r_info['r_name']}" . PHP_EOL;
            $whois[5] = "Контактный телефон: {$r_info['r_phone']}" . PHP_EOL;
            $whois[6] = "Адрес электронной почты: {$r_info['r_email']}" . PHP_EOL;
            $whois[8] = "2­х буквенный код страны: {$r_info['address_country']}" . PHP_EOL;
            $whois[9] = "Город или населённый пункт: {$r_info['address_city']}" . PHP_EOL;
            $whois[10] = "Область, район, провинция: {$r_info['address_region']}" . PHP_EOL;
            $whois[11] = "Почтовый индекс: {$r_info['address_index']}" . PHP_EOL;
            $whois[12] = "Улица: {$r_info['address_street']}" . PHP_EOL;
            $whois[13] = "Номер строения: {$r_info['address_building']}" . PHP_EOL;
            $whois[14] = "Номер комнаты, квартиры, офиса: {$r_info['address_office']}" . PHP_EOL;
		}

        $whois_xml->addChild("whois", implode($whois));
		echo $whois_xml->asXML();
		
	} elseif ($command == "tune_service_profile") {
		$tld = $options['param'];
		$contact_type = $options['value'];
		
		ob_start();
		var_dump($options);
		$vardump = ob_get_clean();
		ob_end_clean();
		Debug($vardump);
		$stdin_input = file_get_contents('php://stdin');



		$service_profile_form_xml = file_get_contents(SERVICE_PROFILE_XML);
		
		if ( empty($service_profile_form_xml ) ) {
			Debug('unable to load form xml file: ' . SERVICE_PROFILE_XML);
			echo $default_xml_string;
			exit(1);
		}
		
		if( empty($tld) && empty($contact_type ) ) {
			if(preg_match( PROFILE_FORM_VALUES_PATTERN, $stdin_input, $matches) ){
				$cur_values_xml_part = $matches[0];
				
				$service_profile_form_xml = preg_replace( PROFILE_FORM_VALUES_PATTERN, $cur_values_xml_part, $service_profile_form_xml, 1, $repcount);
				$service_profile_form_xml = str_replace(array('domain.order.contact', 'customer_', '<field name="contact_select"><select name="contact_select" setvalues="blocking"/></field>'),
														array('service_profile.edit', '', ''),
														$service_profile_form_xml
														);
				Debug($service_profile_form_xml);
			} else{
				Debug('Malformed input');
				echo $default_xml_string;
				exit(1);
			}
		}
		
		echo $service_profile_form_xml;


		
	} elseif ($command == "validate_service_profile") {
	
		Debug("validate_profile");
		
 		$param_xml = simplexml_load_string(file_get_contents('php://stdin'));
 		
 		if( 1 == $param_xml->customer_profiletype  || 3 == $param_xml->customer_profiletype ) {
			if ( strlen($param_xml->customer_passport) != PASSPORT_NMBR_LEN ){
				throw new BillmgrError("passport_len", "customer_passport");
			}
			if ( strlen($param_xml->customer_passport_personalnmbr) != PASSPORT_PERSONALNMBR_LEN ){
				throw new BillmgrError("passport_len_personalnmbr", "customer_passport_perosnalnmbr");
			}
			if ( strtotime($param_xml->customer_passport_date) > time() ){
				throw new BillmgrError("date_incorrect", "customer_passport_date");
			}
		} else if( 2 == $param_xml->customer_profiletype && BY == $param_xml->customer_location_country) {
			if( empty($param_xml->customer_egr_num) ) {
				throw new BillmgrError("by_company_erg", "customer_egr_num");
			}else if ( strlen($param_xml->customer_egr_num) != EGR_LEN ){
				throw new BillmgrError("egr_len", "customer_egr_num");
			}
			if( empty($param_xml->customer_egr_org ) ){
				throw new BillmgrError("by_company_erg", "customer_egr_org");
			}
			if( empty( $param_xml->customer_egr_date  ) ){
				throw new BillmgrError("by_company_erg", "customer_egr_date");
			} else if ( strtotime($param_xml->customer_egr_date) > time() ){
				throw new BillmgrError("date_incorrect", "customer_egr_date");
			}
		}
		
		if( 3 == $param_xml->customer_profiletype ) {
			if ( strlen($param_xml->customer_ip_unp) != UNP_LEN ){
				throw new BillmgrError("unp_len", "customer_ip_unp");
			}
			if ( strlen($param_xml->customer_ip_egr_num) != EGR_LEN ){
				throw new BillmgrError("egr_len", "customer_ip_egr_num");
			}
			if ( strtotime($param_xml->customer_ip_egr_date) > time() ){
				throw new BillmgrError("date_incorrect", "customer_ip_egr_date");
			}
		}
 		
		echo $default_xml_string;

	} elseif ($command == "open") {

		$db = GetConnection();
		$iid = $options['item'];
		$item_param = ItemParam($db, $iid);
		$profile_params = ItemProfiles($db, $iid, $item_param["item_module"]);
		$profile_external_link = array();
			
		$registrant_info = PrepareRegistrantInfo($profile_params['customer']);

		$ns = array();
		$ns_num = 0;
		while (array_key_exists("ns" . $ns_num, $item_param) && !empty($item_param["ns" . $ns_num]) ) {
			$ns_string_parts = explode( '/', $item_param["ns" . $ns_num] );
			$ns[$ns_string_parts[0]] = "{$ns_string_parts[1]}";
			$ns_num++;
		}
		
		$registar_client = GetRegistrarClient($item_param["item_module"]);
	
		if ($registar_client->CreateDomain($item_param['domain'], 1, $ns, $registrant_info )) {
			LocalQuery("domain.open", array("elid" => $item, "sok" => "ok"));
		} else {
			throw new BillmgrError("query", "Ошибка создания домена");
		}
	} elseif ($command == "suspend") {

		$db = GetConnection();
		$iid = $options['item'];
		$item_param = ItemParam($db, $iid);
		$ddb = GetDomainConnection($item_param["item_module"]);
		$ddb->query("UPDATE domain SET status = 'suspend' WHERE name = '" . $ddb->real_escape_string($item_param["domain"]) . "' AND status != 'deleted'");

		LocalQuery("service.postsuspend", array("elid" => $item, "sok" => "ok", ));
	} elseif ($command == "resume") {

		$db = GetConnection();
		$iid = $options['item'];
		$item_param = ItemParam($db, $iid);
		$ddb = GetDomainConnection($item_param["item_module"]);
		$ddb->query("UPDATE domain SET status = 'active' WHERE name = '" . $ddb->real_escape_string($item_param["domain"]) . "' AND status != 'deleted'");

		LocalQuery("service.postresume", array("elid" => $item, "sok" => "ok", ));
	} elseif ($command == "close") {

		$db = GetConnection();
		$iid = $options['item'];
		$item_param = ItemParam($db, $iid);
		$ddb = GetDomainConnection($item_param["item_module"]);
		$ddb->query("UPDATE domain SET status = 'deleted' WHERE name = '" . $ddb->real_escape_string($item_param["domain"]) . "' AND status != 'deleted'");

		LocalQuery("service.postclose", array("elid" => $item, "sok" => "ok", ));
	} elseif ($command == "setparam") {


		LocalQuery("service.postsetparam", array("elid" => $item, "sok" => "ok", ));
	} elseif ($command == "prolong") {
		$db = GetConnection();
		$iid = $options['item'];
		
		$item_param = ItemParam($db, $iid);
		$item_ex_date = $db->query("SELECT expiredate FROM item WHERE id=$iid")->fetch_assoc();
		$item_ex_year = explode('-', $item_ex_date['expiredate'])[0];
		
		var_dump($item_ex_date);
		var_dump($item_ex_year);
		
		$registar_client = GetRegistrarClient($item_param["item_module"]);
		if ( $registar_client->Prolong($item_param['domain'], 1, $item_ex_year) ) {
			LocalQuery("service.postprolong", array("elid" => $item, "sok" => "ok", ));
		} else {
			LocalQuery("service.postprolong", array("elid" => $item, ));
			throw new BillmgrError("query", "Ошибка продления домена");
		}
		
	} elseif ($command == "cancel_prolong") {


	} elseif ($command == "sync_item") {

		$db = GetConnection();
		$iid = $options['item'];
		$item_param = ItemParam($db, $iid);
		$ddb = GetDomainConnection($item_param["item_module"]);
		$param = $ddb->query("SELECT * FROM domain WHERE name = '" . $ddb->real_escape_string($item_param["domain"]) . "' AND status != 'deleted'")->fetch_assoc();
		if ($param["status"] == "active") {
			LocalQuery("service.postresume", array("elid" => $item, "sok" => "ok", ));
			LocalQuery("service.setstatus", array("elid" => $item, "service_status" => "2", ));
		} else {
			LocalQuery("service.postsuspend", array("elid" => $item, "sok" => "ok", ));
			LocalQuery("service.setstatus", array("elid" => $item, "service_status" => "8", ));
		}
		LocalQuery("service.setexpiredate", array("elid" => $item, "expiredate" => $param["expiredate"], ));
	} elseif ($command == "update_ns") {

		$db = GetConnection();
		$iid = $options['item'];
		$item_param = ItemParam($db, $iid);
				
		$ns = array();
		$ns_num = 0;
		while (array_key_exists("ns" . $ns_num, $item_param) && !empty($item_param["ns" . $ns_num]) ) {
			$ns_string_parts = explode( '/', $item_param["ns" . $ns_num] );
			$ns[$ns_string_parts[0]] = "{$ns_string_parts[1]}";
			$ns_num++;
		}
		
		$registar_client = GetRegistrarClient($item_param["item_module"]);
		
		if ( ! $registar_client->UpdateNS($item_param['domain'], $ns) ) {
			throw new BillmgrError('query', 'Ошибка измения серверов имен');
		}
	} elseif ($command == "import") {

		$module = $options['module'];
		$search = array_key_exists("searchstring", $options) ? $options['searchstring'] : "";
		$search_array = explode(" ", $search);
		$db = GetConnection();
		$ddb = GetDomainConnection($module);
		$sub_query = "";
		foreach ($search_array as $domain) {
			if ($domain == "")
				continue;
			if ($sub_query == "")
				$sub_query .= " AND name in (";
			else
				$sub_query .= ",";
			$sub_query .= "'" . $ddb->real_escape_string($domain) . "'";
		}
		if ($sub_query != "")
			$sub_query .= ")";
		$contact_array = array();
		$type_array = array("customer", "owner", "admin", "bill", "tech");
		Debug("sub_query: ". $sub_query);
		$res = $ddb->query("SELECT customer, owner, admin, bill, tech, name, status, expiredate, ns FROM domain WHERE status != 'deleted'" . $sub_query);
		while ($row = $res->fetch_assoc()) {
			$tld_name = explode(".", $row["name"], 2)[1];
			$tld_id = $db->query("SELECT id FROM tld WHERE name = '" . $db->real_escape_string($tld_name) . "'")->fetch_row()[0];
			$domain_param = array();
			$domain_param["sok"] = "ok";
			$domain_param["expiredate"] = $row["expiredate"];
			$domain_param["module"] = $module;
			$domain_param["status"] = $row["status"] == "active" ? "2" : "8";
			$domain_param["import_pricelist_intname"] = $tld_id;
			$domain_param["import_service_name"] = $row["name"];
			$domain_param["domain"] = $row["name"];
			$service_id = LocalQuery("processing.import.service", $domain_param)->service_id;
			foreach ($type_array as $type) {
				Debug($type);
				if (array_key_exists($row[$type], $contact_array) == false) {
					$contact = $ddb->query("SELECT * FROM contact WHERE id  = '" . $ddb->real_escape_string($row[$type]) . "'")->fetch_assoc();
					$contact_param = array();
					$contact_param["sok"] = "ok";
					$contact_param["type"] = $type;
					$contact_param["name"] = $contact["firstname"];
					$contact_param["module"] = $module;
					$contact_param["externalid"] = $row[$type];
					$contact_param["profiletype"] = "1";
					$contact_param["firstname"] = $contact["firstname"];
					$contact_param["middlename"] = $contact["middlename"];
					$contact_param["lastname"] = $contact["lastname"];
					$contact_param["firstname_locale"] = $contact["firstname"];
					$contact_param["middlename_locale"] = $contact["middlename"];
					$contact_param["lastname_locale"] = $contact["lastname"];
					$contact_param["passport"] = "";
					$contact_param["location_postcode"] = "";
					$contact_param["location_state"] = "";
					$contact_param["location_city"] = "";
					$contact_param["location_address"] = "";
					$contact_param["birth_date"] = "";
					$contact_param["location_country"] = "";
					$contact_param["postal_postcode"] = "";
					$contact_param["postal_state"] = "";
					$contact_param["postal_city"] = "";
					$contact_param["postal_address"] = "";
					$contact_param["postal_addressee"] = "";
					$contact_param["phone"] = "";
					$contact_param["fax"] = "";
					$contact_param["email"] = "";
					$contact_param["inn"] = "";
					$contact_param["mobile"] = "";
					$contact_param["company"] = "";
					$contact_param["company_locale"] = "";
					$contact_param["kpp"] = "";
					$contact_param["ogrn"] = "";
					$profile_id = LocalQuery("processing.import.profile", $contact_param)->profile_id;
					$contact_array[$row[$type]] = $profile_id;
				}
				LocalQuery("service_profile2item.edit", array("sok" => "ok", "service_profile" => $contact_array[$row[$type]], "item" => $service_id, "type" => $type));
			}
		}
	}
} catch (Exception $e) {
	if ($runningoperation > 0) {

		LocalQuery("runningoperation.edit", array("sok" => "ok", "elid" => $runningoperation, "errorxml" => $e,));
		if ($item > 0) {

			LocalQuery("runningoperation.setmanual", array("elid" => $runningoperation,));

			$task_type = LocalQuery("task.gettype", array("operation" => $command,))->task_type;
			if ($task_type != "") {
				LocalQuery("task.edit", array("sok" => "ok", "item" => $item, "runningoperation" => $runningoperation, "type" => $task_type, ));
			}
		}
	}
	echo $e;
} 
